// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message(
                    username,
                    message_text,
                    group_id
) VALUES ($1, $2, $3) RETURNING message_id, username, message_text, sent_datetime, group_id
`

type CreateMessageParams struct {
	Username    string `json:"username"`
	MessageText string `json:"message_text"`
	GroupID     int64  `json:"group_id"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.Username, arg.MessageText, arg.GroupID)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.Username,
		&i.MessageText,
		&i.SentDatetime,
		&i.GroupID,
	)
	return i, err
}

const listUserGroupMessage = `-- name: ListUserGroupMessage :many
SELECT message_id, username, message_text, sent_datetime, group_id
FROM message
WHERE username = $1 AND group_id = $2
`

type ListUserGroupMessageParams struct {
	Username string `json:"username"`
	GroupID  int64  `json:"group_id"`
}

func (q *Queries) ListUserGroupMessage(ctx context.Context, arg ListUserGroupMessageParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listUserGroupMessage, arg.Username, arg.GroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.MessageID,
			&i.Username,
			&i.MessageText,
			&i.SentDatetime,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
