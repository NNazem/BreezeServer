// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contact.sql

package db

import (
	"context"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (first_name, last_name, profile_photo, phone_number, username, hashed_password) VALUES ($1, $2, $3, $4, $5, $6) RETURNING contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password
`

type CreateContactParams struct {
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	ProfilePhoto   []byte `json:"profile_photo"`
	PhoneNumber    string `json:"phone_number"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePhoto,
		arg.PhoneNumber,
		arg.Username,
		arg.HashedPassword,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE username = $1
`

func (q *Queries) DeleteContact(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteContact, username)
	return err
}

const getContact = `-- name: GetContact :one
SELECT contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password FROM contact
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetContact(ctx context.Context, username string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, username)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const getContactList = `-- name: GetContactList :many
SELECT c.contact_id, c.first_name, c.last_name, c.profile_photo, c.phone_number, c.username, a.group_id
FROM contact as c
JOIN group_member as a ON c.contact_id = a.contact_id
JOIN group_member as b on a.group_id = b.group_id
WHERE a.contact_id != b.contact_id AND a.contact_id != $1
`

type GetContactListRow struct {
	ContactID    int64  `json:"contact_id"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	ProfilePhoto []byte `json:"profile_photo"`
	PhoneNumber  string `json:"phone_number"`
	Username     string `json:"username"`
	GroupID      int64  `json:"group_id"`
}

func (q *Queries) GetContactList(ctx context.Context, contactID int64) ([]GetContactListRow, error) {
	rows, err := q.db.QueryContext(ctx, getContactList, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetContactListRow{}
	for rows.Next() {
		var i GetContactListRow
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.ProfilePhoto,
			&i.PhoneNumber,
			&i.Username,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContact = `-- name: SearchContact :many
SELECT c.contact_id, c.first_name, c.last_name, c.profile_photo, c.phone_number, c.username
FROM contact as c
WHERE LOWER(c.username) LIKE '%' || LOWER($1) || '%'
`

type SearchContactRow struct {
	ContactID    int64  `json:"contact_id"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	ProfilePhoto []byte `json:"profile_photo"`
	PhoneNumber  string `json:"phone_number"`
	Username     string `json:"username"`
}

func (q *Queries) SearchContact(ctx context.Context, lower string) ([]SearchContactRow, error) {
	rows, err := q.db.QueryContext(ctx, searchContact, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchContactRow{}
	for rows.Next() {
		var i SearchContactRow
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.ProfilePhoto,
			&i.PhoneNumber,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact
SET first_name = $1 AND last_name = $2 AND profile_photo = $3
WHERE username = $1
RETURNING contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password
`

type UpdateContactParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	ProfilePhoto []byte `json:"profile_photo"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact, arg.FirstName, arg.LastName, arg.ProfilePhoto)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}
