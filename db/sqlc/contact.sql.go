// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact.sql

package db

import (
	"context"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (first_name, last_name, profile_photo, phone_number, username, hashed_password) VALUES ($1, $2, $3, $4, $5, $6) RETURNING contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password
`

type CreateContactParams struct {
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	ProfilePhoto   []byte `json:"profile_photo"`
	PhoneNumber    string `json:"phone_number"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePhoto,
		arg.PhoneNumber,
		arg.Username,
		arg.HashedPassword,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE username = $1
`

func (q *Queries) DeleteContact(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteContact, username)
	return err
}

const getContact = `-- name: GetContact :one
SELECT contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password FROM contact
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetContact(ctx context.Context, username string) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, username)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact
SET first_name = $1 AND last_name = $2 AND profile_photo = $3
WHERE username = $1
RETURNING contact_id, first_name, last_name, profile_photo, phone_number, username, hashed_password
`

type UpdateContactParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	ProfilePhoto []byte `json:"profile_photo"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact, arg.FirstName, arg.LastName, arg.ProfilePhoto)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePhoto,
		&i.PhoneNumber,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}
