// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_member.sql

package db

import (
	"context"
)

const createGroupMember = `-- name: CreateGroupMember :one
INSERT INTO group_member(
                         contact_id,
                         group_id
) VALUES ($1, $2) RETURNING contact_id, group_id, joined_datetime, left_datetime
`

type CreateGroupMemberParams struct {
	ContactID int64 `json:"contact_id"`
	GroupID   int64 `json:"group_id"`
}

func (q *Queries) CreateGroupMember(ctx context.Context, arg CreateGroupMemberParams) (GroupMember, error) {
	row := q.db.QueryRowContext(ctx, createGroupMember, arg.ContactID, arg.GroupID)
	var i GroupMember
	err := row.Scan(
		&i.ContactID,
		&i.GroupID,
		&i.JoinedDatetime,
		&i.LeftDatetime,
	)
	return i, err
}

const deleteGroupMembers = `-- name: DeleteGroupMembers :exec
DELETE FROM group_member WHERE group_id = $1
`

func (q *Queries) DeleteGroupMembers(ctx context.Context, groupID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroupMembers, groupID)
	return err
}

const getGroupId = `-- name: GetGroupId :one
SELECT a.group_id
FROM group_member as a JOIN group_member as b ON a.group_id = b.group_id
WHERE a.contact_id != b.contact_id AND a.contact_id = $1 AND b.contact_id = $2
`

type GetGroupIdParams struct {
	ContactID   int64 `json:"contact_id"`
	ContactID_2 int64 `json:"contact_id_2"`
}

func (q *Queries) GetGroupId(ctx context.Context, arg GetGroupIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGroupId, arg.ContactID, arg.ContactID_2)
	var group_id int64
	err := row.Scan(&group_id)
	return group_id, err
}
